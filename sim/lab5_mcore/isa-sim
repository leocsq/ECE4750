#!/usr/bin/env python
#=========================================================================
# isa-sim [options] <elf-binary>
#=========================================================================
# This is a simple ISA simulator for both a single core and multicore
# processor. It is a functional-level model which executes each
# instruction in a single step before moving on to the next instruction.
#
#  -h --help           Display this message
#
#  --mcore             Run in quad-core mode (default is single core)
#  --trace             Display line tracing
#  --trace-regs        Show regs read/written by each inst
#  --limit             Set max number of "steps", default=10000
#
#  <elf-binary>        TinyRV2 elf binary file
#
# Author : Shunning Jiang, Christopher Batten
# Date   : Oct 2, 2016

from __future__ import print_function

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

random.seed(0xdeadbeef)

from pymtl      import *
from pclib.ifcs import InValRdyBundle, OutValRdyBundle
from pclib.ifcs import MemMsg
from pclib.test import TestMemory

from lab2_proc.SparseMemoryImage       import SparseMemoryImage
from lab2_proc.test.harness            import TestHarness
from lab2_proc.tinyrv2_encoding        import assemble
from lab2_proc                         import ProcFL

import elf

#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",               action="store_true"    )

  # Additional commane line arguments for the simulator

  p.add_argument( "--mcore",                action="store_true"    )
  p.add_argument( "--trace",                action="store_true"    )
  p.add_argument( "--trace-regs",           action="store_true"    )
  p.add_argument( "--limit", default=10000, type=int               )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#=========================================================================
# TestHarness
#=========================================================================

class TestHarness( Model ):

  #-----------------------------------------------------------------------
  # constructor
  #-----------------------------------------------------------------------

  def __init__( s, mcore=False, trace_regs=False ):

    # prog2mngr interface. Note simulator only gets output, so we don't
    # need to worry about the mngr2proc interface. The simulator will
    # monitor this interface for handling various message types.

    s.proc2mngr = OutValRdyBundle ( 32 )

    # Single core composition

    s.stats_en  = OutPort(1)

    s.mcore = mcore
    if not mcore:

      s.commit_inst = OutPort(1)

      # Instantiate processor and memory

      s.proc = ProcFL     ( trace_regs=trace_regs )
      s.mem  = TestMemory ( MemMsg(8,32,32), 2 )

      # Processor <-> Proc/Mngr

      s.connect( s.proc.proc2mngr, s.proc2mngr       )
      s.connect( s.proc.stats_en,  s.stats_en        )

      # Processor <-> Memory

      s.connect( s.proc.imemreq,   s.mem.reqs[0]     )
      s.connect( s.proc.imemresp,  s.mem.resps[0]    )
      s.connect( s.proc.dmemreq,   s.mem.reqs[1]     )
      s.connect( s.proc.dmemresp,  s.mem.resps[1]    )
      s.connect( s.proc.commit_inst, s.commit_inst   )

    # Multicore composition

    else:

      s.commit_inst = OutPort(4)

      # Instantiate four processors and memory

      s.procs = [ ProcFL( trace_regs=trace_regs, num_cores=4 ) for i in range(4) ]
      s.mem   = TestMemory ( MemMsg(8,32,32), 8 )

      # Processor 0 <-> Proc/Mngr

      s.connect( s.procs[0].proc2mngr, s.proc2mngr )
      s.connect( s.procs[0].stats_en,  s.stats_en )
      
      for i in range(4):
        s.connect( s.procs[i].core_id, i )
        s.connect( s.procs[i].commit_inst, s.commit_inst[i] )

      # Processors <-> Memory

      for i in range(4):
        s.connect( s.procs[i].imemreq,   s.mem.reqs  [ 2*i + 0 ] )
        s.connect( s.procs[i].imemresp,  s.mem.resps [ 2*i + 0 ] )
        s.connect( s.procs[i].dmemreq,   s.mem.reqs  [ 2*i + 1 ] )
        s.connect( s.procs[i].dmemresp,  s.mem.resps [ 2*i + 1 ] )

  #-----------------------------------------------------------------------
  # load memory image
  #-----------------------------------------------------------------------

  def load( self, mem_image ):
    sections = mem_image.get_sections()
    for section in sections:
      start_addr = section.addr
      stop_addr  = section.addr + len(section.data)
      self.mem.mem[start_addr:stop_addr] = section.data

  #-----------------------------------------------------------------------
  # line trace
  #-----------------------------------------------------------------------

  def line_trace( s ):
    if not s.mcore:
      return s.proc.line_trace()
    else:
      return ' | '.join( [ s.procs[i].line_trace() for i in range(4) ] )

#=========================================================================
# Main
#=========================================================================

def main():

  opts = parse_cmdline()

  #-----------------------------------------------------------------------
  # Load the elf file and we don't need hacky binary rewriting anymore!
  #-----------------------------------------------------------------------

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf.elf_reader( file_obj )

  #-----------------------------------------------------------------------
  # Setup simulator
  #-----------------------------------------------------------------------

  # Create test harness and elaborate

  model = TestHarness( mcore=opts.mcore, trace_regs=opts.trace_regs )
  model.elaborate()

  # Load the program into the model

  model.load( mem_image )

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # We are always ready to accept a proc2mngr message

  model.proc2mngr.rdy.value = 1

  #-----------------------------------------------------------------------
  # Run the simulation
  #-----------------------------------------------------------------------

  if opts.trace:
    print()

  count = 0

  # Storage for extra three messages on failure

  app_fail_xtra       = False
  app_fail_xtra_count = 0
  app_fail_xtra_msgs  = [ None, None, None ]

  commit_inst = [0]*4

  # Storage for print

  app_print           = False
  app_print_type      = None  # 0: int, 1: char, 2: string

  sim.reset()
  while count < opts.limit:

    # Generate line trace

    if opts.trace:
      sim.print_line_trace()

    if model.stats_en:
      num_cores = 4 if opts.mcore else 1
      for i in xrange(num_cores):
        if model.commit_inst[i]:
          commit_inst[i] += 1

    # Check the proc2mngr interface

    if model.proc2mngr.val:

      msg_type = model.proc2mngr.msg[16:32]
      msg_xtra = model.proc2mngr.msg[ 0:16]

      # First we check if we are gathering app_fail_xtra_msgs

      if app_fail_xtra:
        app_fail_xtra_msgs[ app_fail_xtra_count ] = model.proc2mngr.msg[:]
        app_fail_xtra_count += 1
        if app_fail_xtra_count == 3:
          print( "" )
          print( "  [ FAILED ] dest[{0}] != ref[{0}] ({1} != {2})" \
                  .format( int(app_fail_xtra_msgs[0]),
                           int(app_fail_xtra_msgs[1]),
                           int(app_fail_xtra_msgs[2]) ) )
          print( "" )
          exit(1)

      # Then we check if we are doing a print

      elif app_print:

        # Print int

        if app_print_type == 0:
          print( model.proc2mngr.msg[:].uint(), end='' )
          app_print = False

        if app_print_type == 1:
          print( chr(model.proc2mngr.msg[:].uint()), end='' )
          app_print = False

        if app_print_type == 2:
          char_as_num = model.proc2mngr.msg[:].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end='' )
          else:
            app_print = False

      # Message is from an assembly test

      elif msg_type == 0:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          print( "" )
          print( "  [ FAILED ] error on line {}".format(msg_xtra.uint()) )
          print( "" )
          exit(1)

      # Message is from a bmark

      elif msg_type == 1:

        if msg_xtra == 0:
          break
        else:
          exit( msg_xtra.uint() )

      # Message is from a bmark

      elif msg_type == 2:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          print("In stats_en region:")
          print(  "  total_committed_inst   = {}".format( reduce(lambda x,y:x+y, commit_inst) ))
          if opts.mcore:
            print( "" )
            for i in xrange(4):
              print("  core{}_committed_inst   = {}".format( i, commit_inst[i] ))
          break

        else:
          app_fail_xtra = True

      # Message is from print

      elif msg_type == 3:
        app_print = True
        app_print_type = msg_xtra
        if app_print_type not in [0,1,2]:
          print("ERROR: received unrecognized app print type!")
          exit(1)

    # Tick the simulator

    sim.cycle()

  #-----------------------------------------------------------------------
  # Post processing
  #-----------------------------------------------------------------------

  # Force a test failure if we timed out

  if count >= opts.limit:
    print("""
   ERROR: Exceeded maximum number of 'steps' ({}). Your
   application might be in an infinite loop, or you need to use the
   --limit command line option to increase the limit.
    """.format(opts.limit))
    exit(1)

  exit(0)

main()

