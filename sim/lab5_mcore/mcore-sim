#!/usr/bin/env python
#=========================================================================
# tinyrv2-mcore-sim [options] <elf-binary>
#=========================================================================
# This is a simulator for lab5 alt design.
#
#  -h --help           Display this message
#
#  --trace             Display line tracing
#  --limit             Set max number of cycles, default=200000
#  --stats             Output stats about execution
#  --dump-vcd          Dump VCD to imul-<impl>-<input>.vcd
#
#  <elf-binary>        TinyRV2 elf binary file
#
# Author : Shunning Jiang, Christopher Batten
# Date   : Oct 2, 2016

from __future__ import print_function

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

random.seed(0xdeadbeef)

from pymtl      import *
import elf

from test.harnesses            import SimHarness

# 4proc + 4icache + 4dcachebank + 3nets <-> 2-port mem
from lab5_mcore.MultiCoreRTL import MultiCoreRTL


#=========================================================================
# Command line processing
#=========================================================================

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help", action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--trace",    action="store_true"     )
  p.add_argument( "--limit",    default=200000, type=int )
  p.add_argument( "--stats",    action="store_true"     )
  p.add_argument( "--dump-vcd", action="store_true"     )

  p.add_argument( "elf_file" )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#=========================================================================
# Main
#=========================================================================

def main():

  opts = parse_cmdline()

  #-----------------------------------------------------------------------
  # Load the elf file and we don't need hacky binary rewriting anymore!
  #-----------------------------------------------------------------------

  # Open elf binary

  mem_image = None
  with open(opts.elf_file,'rb') as file_obj:
    mem_image = elf.elf_reader( file_obj )

  #-----------------------------------------------------------------------
  # Setup simulator
  #-----------------------------------------------------------------------

  # Create VCD filename

  dump_vcd = ""
  if opts.dump_vcd:
    elf_file_basename = os.path.basename( opts.elf_file )
    dump_vcd = "mcore-sim-elf-{}.vcd".format( elf_file_basename )

  # Create test harness and elaborate
  # Now we need a SimHarness with 128B mem data and 2 ports

  model = SimHarness( MultiCoreRTL(), dump_vcd, num_cores=4 )

  model.vcd_file = dump_vcd
  model.elaborate()

  # Load the program into the model

  model.load( mem_image )

  # Create a simulator using the simulation tool

  sim = SimulationTool( model )

  # We are always ready to accept a proc2mngr message

  model.proc2mngr.rdy.value = 1

  #-----------------------------------------------------------------------
  # Run the simulation
  #-----------------------------------------------------------------------

  if opts.trace:
    print()

  num_cycles = 0
  count      = 0

  # Storage for extra three messages on failure

  app_fail_xtra       = False
  app_fail_xtra_count = 0
  app_fail_xtra_msgs  = [ None, None, None ]

  # Storage for print

  app_print           = False
  app_print_type      = None  # 0: int, 1: char, 2: string

  # statistics

  commit_inst = [0]*4

  icache_access = [0]*4
  icache_miss = [0]*4

  dcache_access = [0]*4
  dcache_miss = [0]*4

  sim.reset()
  while count < opts.limit:
    count = count + 1

    # Generate line trace

    if opts.trace:
      sim.print_line_trace()

    # Update cycle count

    if model.stats_en:
      num_cycles += 1

      # icache requests

      for i in xrange(4):
        if model.model.icache_access[i]:
          icache_access[i] += 1
        if model.model.icache_miss[i]:
          icache_miss[i] += 1

      # dcache requests

      for i in xrange(4):
        if model.model.dcache_access[i]:
          dcache_access[i] += 1
        if model.model.dcache_miss[i]:
          dcache_miss[i] += 1

      for i in xrange(4):
        if model.model.commit_inst[i]:
          commit_inst[i] += 1

    # Check the proc2mngr interface

    if model.proc2mngr.val:

      msg_type = model.proc2mngr.msg[16:32]
      msg_xtra = model.proc2mngr.msg[ 0:16]

      # First we check if we are gathering app_fail_xtra_msgs

      if app_fail_xtra:
        app_fail_xtra_msgs[ app_fail_xtra_count ] = model.proc2mngr.msg[:]
        app_fail_xtra_count += 1
        if app_fail_xtra_count == 3:
          print( "" )
          print( "  [ FAILED ] dest[{0}] != ref[{0}] ({1} != {2})" \
                  .format( int(app_fail_xtra_msgs[0]),
                           int(app_fail_xtra_msgs[1]),
                           int(app_fail_xtra_msgs[2]) ) )
          print( "" )
          exit(1)

      # Then we check if we are doing a print

      elif app_print:

        # Print int

        if app_print_type == 0:
          print( model.proc2mngr.msg[:].uint(), end='' )
          app_print = False

        if app_print_type == 1:
          print( chr(model.proc2mngr.msg[:].uint()), end='' )
          app_print = False

        if app_print_type == 2:
          char_as_num = model.proc2mngr.msg[:].uint()
          if char_as_num > 0:
            print( chr(char_as_num), end='' )
          else:
            app_print = False

      # Message is from an assembly test

      elif msg_type == 0:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          print( "" )
          print( "  [ FAILED ] error on line {}".format(msg_xtra.uint()) )
          print( "" )
          exit(1)

      # Message is from a bmark

      elif msg_type == 1:

        if msg_xtra == 0:
          break
        else:
          exit( msg_xtra.uint() )

      # Message is from a bmark

      elif msg_type == 2:

        if msg_xtra == 0:
          print( "" )
          print( "  [ passed ]" )
          print( "" )
          break

        else:
          app_fail_xtra = True

      # Message is from print

      elif msg_type == 3:
        app_print = True
        app_print_type = msg_xtra
        if app_print_type not in [0,1,2]:
          print("ERROR: received unrecognized app print type!")
          exit(1)

    # Tick the simulator

    sim.cycle()

  #-----------------------------------------------------------------------
  # Post processing
  #-----------------------------------------------------------------------

  # Force a test failure if we timed out

  if count >= opts.limit:
    print("""
   ERROR: Exceeded maximum number of cycles ({}). Your
   application might be in an infinite loop, or you need to use the
   --limit command line option to increase the limit.
    """.format(opts.limit))
    exit(1)

  # Display stats

  def reduce_add( arr ):
    return reduce(lambda x,y:x+y, arr) 

  if opts.stats:
    print("In stats_en region:\n")
    print(  "  num_cycles             =", num_cycles)
    print(  "  total_committed_inst   = {}".format( reduce_add(commit_inst) ))
    print(  "  total_cpi              = {:.2f}".format( 1.0*num_cycles/reduce_add(commit_inst) ))
    print ()

    print(  "  total_icache_miss      = {}".format( reduce_add(icache_miss) ))
    print(  "  total_icache_access    = {}".format( reduce_add(icache_access) ))
    if reduce_add(icache_access) > 0:
      print("  total_icache_miss_rate = {:.4f}"
            .format( 1.0*reduce_add(icache_miss)/reduce_add(icache_access) ))
    print ()

    print(  "  total_dcache_miss      = {}".format( reduce_add(dcache_miss) ))
    print(  "  total_dcache_access    = {}".format( reduce_add(dcache_access) ))
    if reduce_add(dcache_access) > 0:
      print("  total_dcache_miss_rate = {:.4f}"
            .format( 1.0*reduce_add(dcache_miss)/reduce_add(dcache_access) ))
    print ()

    for i in xrange(4):
      print("  core{}_committed_inst   = {}".format( i, commit_inst[i] ))
      print("  core{}_cpi              = {:.2f}".format( i, 1.0*num_cycles/commit_inst[i] ))

    print ()

    for i in xrange(4):
      print("  icache{}_miss           = {}".format( i, icache_miss[i] ))
      print("  icache{}_access         = {}".format( i, icache_access[i] ))
      if icache_access[i] > 0:
        print("  icache{}_miss_rate      = {:.4f}"
              .format( i, 1.0*icache_miss[i]/icache_access[i] ))

    print ()

    for i in xrange(4):
      print("  dcache_bank{}_miss      = {}".format( i, dcache_miss[i] ))
      print("  dcache_bank{}_access    = {}".format( i, dcache_access[i] ))
      if dcache_access[i] > 0:
        print("  dcache_bank{}_miss_rate = {:.4f}"
              .format( i, 1.0*dcache_miss[i]/dcache_access[i] ))

  exit(0)

main()

