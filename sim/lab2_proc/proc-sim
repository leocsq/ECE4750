#!/usr/bin/env python
#=========================================================================
# proc-sim [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --impl              {base,alt,fl}
#  --input <dataset>   {vvadd-unopt,vvadd-opt,bsearch,cmult,mfilt}
#  --verify            Verify results
#  --trace             Display line tracing
#  --stats             Display statistics
#  --dump-vcd          Dump VCD to proc-<impl>-<input>.vcd
#  --max-cycles        Set timeout num_cycles, default=8000
#  --mem-latency       Set memory latency, default=0
#  --mem-dprob         Set memory delay probability, default=0
#
# Author : Moyang Wang
# Date   : September 23, 2015
#

from __future__ import print_function

# Hack to add project root to python path

import os
import sys

sim_dir = os.path.dirname( os.path.abspath( __file__ ) )
while sim_dir:
  if os.path.exists( sim_dir + os.path.sep + ".pymtl-python-path" ):
    sys.path.insert(0,sim_dir)
    break
  sim_dir = os.path.dirname(sim_dir)

import argparse
import re
import random

random.seed(0xdeadbeef)

from pymtl                     import *

from test.harness              import TestHarness
from tinyrv2_encoding          import assemble

from ProcBaseRTL               import ProcBaseRTL
from ProcAltRTL                import ProcAltRTL
from ProcFL                import ProcFL

from ubmark.proc_ubmark_vvadd_unopt   import ubmark_vvadd_unopt
from ubmark.proc_ubmark_vvadd_opt     import ubmark_vvadd_opt
from ubmark.proc_ubmark_cmult         import ubmark_cmult
from ubmark.proc_ubmark_bsearch       import ubmark_bsearch
from ubmark.proc_ubmark_mfilt         import ubmark_mfilt

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",                   action="store_true"    )

  # Additional commane line arguments for the simulator

  p.add_argument( "--impl",        default="base",  choices=["base","alt","fl"] )
  p.add_argument( "--input",       default="vvadd-unopt",
                  choices=["vvadd-unopt", "vvadd-opt", "bsearch",
                           "cmult", "mfilt"]                  )
  p.add_argument( "--trace",                        action="store_true"    )
  p.add_argument( "--stats",                        action="store_true"    )
  p.add_argument( "--verify",                       action="store_true"    )
  p.add_argument( "--dump-vcd",                     action="store_true"    )
  p.add_argument( "--mem-latency", default=0,       type=int               )
  p.add_argument( "--mem-dprob",   default=0.0,     type=float             )
  p.add_argument( "--max-cycles",  default=15000,   type=int               )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Tables
#-------------------------------------------------------------------------

model_impl_dict = {
  "base": ProcBaseRTL,
  "alt" : ProcAltRTL,
  "fl"  : ProcFL,
}

input_dict = {
  "vvadd-unopt"   : ubmark_vvadd_unopt,
  "vvadd-opt"     : ubmark_vvadd_opt,
  "bsearch"       : ubmark_bsearch,
  "mfilt"         : ubmark_mfilt,
  "cmult"         : ubmark_cmult,
}

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

opts = parse_cmdline()

ProcModel = model_impl_dict[ opts.impl ]

# Create VCD filename

dump_vcd = ""
if opts.dump_vcd:
  dump_vcd = "proc-{}-{}.vcd".format( opts.impl, opts.input )

# Create test harness and elaborate

model = TestHarness( ProcModel, dump_vcd, 0, 0, opts.mem_dprob, opts.mem_latency )
model.vcd_file = dump_vcd

model.elaborate()

input = input_dict[ opts.input ]

# Assemble the test program

mem_image = input.gen_mem_image()

# Load the program into the model

model.load( mem_image )

# Create a simulator using the simulation tool

sim = SimulationTool( model )

# Run the simulation

print()

num_insts = 0

sim.reset()
while not model.done() and sim.ncycles < opts.max_cycles:
  if opts.trace:
    sim.print_line_trace()
  sim.cycle()

  # count number of commited instructions
  if sim.model.proc.commit_inst:
    num_insts += 1

# Force a test failure if we timed out

assert sim.ncycles < opts.max_cycles

# Add a couple extra ticks so that the VCD dump is nicer

sim.cycle()
sim.cycle()
sim.cycle()

if opts.verify:
  passed = input.verify( sim.model.mem.mem )
  print()
  if not passed:
    exit(1)

if opts.stats:
  cpi = float(sim.ncycles) / float(num_insts)
  print( " num_cycles = {}".format( sim.ncycles ) )
  print( " num_insts  = {}".format( num_insts ) )
  print( " CPI        = {:1.2f}".format( cpi ) )
  print()

